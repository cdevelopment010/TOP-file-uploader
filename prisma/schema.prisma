// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session { 
  id String @id
  sid String @unique
  data String @db.VarChar(255)
  expiresAt DateTime
}

model User { 
  id Int @id @default(autoincrement())
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  folder Folder[]
  file File[]
}


model Folder {
  id Int @id @default(autoincrement())
  name String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  file File[]
  parentFolder Folder? @relation("subfolder",fields: [parentId], references: [id], onDelete: Cascade) //self relation
  parentId Int?
  subfolder Folder[] @relation("subfolder")  //needed for self relation

  shareId String? @unique @default(uuid())
  shareExpire DateTime? 

}

model File {
  id Int @id @default(autoincrement())
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int
  name String
  size Decimal @db.Decimal(10,2)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  path String?
  
}